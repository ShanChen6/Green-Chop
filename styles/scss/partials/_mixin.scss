//Định nghĩa các mixin trong dự án
// BOX
@mixin box($width, $height: $width) {
    width: $width;
    height: $height;
}

// Flexbox Toolkit
@mixin flex-column {
    display: flex;
    flex-direction: column;
}

@mixin flex-row {
  display: flex;
  flex-direction: row;
}
  
@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-space-between {
  display: flex;
  justify-content: space-between;
  align-items: center; 
}

@mixin flex-end-center {
  display: flex;
  justify-content: flex-end;
  align-items: center;
}
  
@mixin flex-center-column {
    @include flex-center;
    flex-direction: column;
}
  
@mixin flex-center-vert {
    display: flex;
    align-items: center;
}
  
@mixin flex-center-horiz {
    display: flex;
    justify-content: center;
}

// Font Size 
@mixin font-size($size, $base: 16) {
    font-size: $size + px;
    font-size: ($size / $base) + rem;
}

@mixin font-size($font-size, $line-height: normal, $letter-spacing: normal) {
    font-size: $font-size * 1px;
    // font-size: $font-size * 0.1rem; 
    // example using rem values and 62.5% font-size so 1rem = 10px
  
    @if $line-height==normal {
      line-height: normal;
    } @else {
      line-height: $line-height / $font-size;
    }
  
    @if $letter-spacing==normal {
      letter-spacing: normal;
    } @else {
      letter-spacing: #{$letter-spacing / $font-size}em;
    }
}

// Font Face
@mixin font-face($font-name, $path, $weight: normal, $style: normal) {
    @font-face {
      font-family: quote($font-name);
      src: url($path+".eot");
      src: url($path+".eot?#iefix") format("embedded-opentype"), url($path+".woff")
          format("woff"), url($path+".ttf") format("truetype"), url($path+".svg##{$font-name}")
          format("svg");
      font-weight: $weight;
      font-style: $style;
    }
}

// Cover Background
@mixin cover-background {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
}

// Pseudo
@mixin pseudo(
  $width: 100%,
  $height: 100%,
  $display: inline-block,
  $pos: absolute,
  $content: ""
) {
  content: $content;
  display: $display;
  position: $pos;
  @include box($width, $height);
}

// Media queries
$breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
);

@mixin respond-to($key) {
  $value: map-get($breakpoints, $key);
  @if $value {
    @media (min-width: $value) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$key}' not found in map!";
  }
}


// $tablet: 768;
// $large: 1024;
// $desktop: 1280;

// @mixin tablet {
//   @media only screen and (min-width: $tablet * 1px) {
//     @content;
//   }
// }

// @mixin large {
//   @media only screen and (min-width: $large * 1px) {
//     @content;
//   }
// }

// @mixin desktop {
//   @media only screen and (min-width: $desktop * 1px) {
//     @content;
//   }
// }

// z-index handling
$elements: landing, header, modal, very-important-modal;

@mixin z-index($id) {
  z-index: index($elements, $id);
}

// Visibility
@mixin fade($type) {
    @if $type== "hide" {
      visibility: hidden;
      opacity: 0;
      transition: visibility 1s, opacity 1s;
    } @else if $type== "show" {
      visibility: visible;
      opacity: 1;
      transition: visibility 1s, opacity 1s;
    }
}

// Background Transition
@mixin skew-background-transition($initial, $hover, $inverted: false) {
    background: linear-gradient(
      90deg,
      $hover 0%,
      $hover 50%,
      $initial 50%,
      $initial 100%
    );
    background-repeat: no-repeat;
    background-size: 200% 100%;
  
    background-position: right bottom;
    @if $inverted {
      background-position: left bottom;
    }
    transition: background-position 0.25s ease-out;
  
    &:hover {
      background-position: left bottom;
      @if $inverted {
        background-position: right bottom;
      }
    }
}
  